Question - Find first repeated character

******************************************************************************************************

Description -

Given a string S. The task is to find the first repeated character in it. We need to find the character that occurs more than once and whose index of second occurrence is smallest. S contains only lowercase letters.

Example 1:

Input: S="geeksforgeeks"
Output: e
Explanation: 'e' repeats at third position.
 

Example 2:

Input: S="hellogeeks"
Output: l
Explanation: 'l' repeats at fourth position.
 

Example 3:

Input: S="abc"
Output: -1
Explanation: There is no repeated character.

**************************************************************************************************************************************

Code - 

******************************************************************************************************************************************

//{ Driver Code Starts
//Initial Template for Java
import java.io.*;
import java.util.*; 
class GFG{
    public static void main(String args[]) throws IOException { 
        BufferedReader read = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine().trim());
        while(t-- > 0){
            String s = read.readLine().trim();
            Solution ob = new Solution();
            System.out.println(ob.firstRepChar(s));
        }
    }
}
// } Driver Code Ends


//User function Template for Java
class Solution 
{ 
    String firstRepChar(String s) 
    { 
        // code here
        
        /*
        
        1) So logic is we will create a HashMap which will store the characters from a given string with its count.
        2) If the character is not already present in a HashMap then we will put it to map and will make its count as 1 and if the character is already present in a map then it means it is the first repeated character so directly we will retun it.
        3) If no character is repeated then we will return "-1".
        
        */
        
        HashMap<Character, Integer> myMap = new HashMap<>();
        
        for(int i=0; i<s.length(); i++){
            if(myMap.containsKey(s.charAt(i))){
                return Character.toString(s.charAt(i)); // Because we want to return a string and not a character
            }
            else{
                myMap.put(s.charAt(i), 1);
            }
        }
        
        return "-1";
    }
} 
